// This file is auto-generated by @hey-api/openapi-ts
// eslint-disable-next-line ts/ban-ts-comment
// @ts-nocheck

import { type Options, client } from "@hey-api/client-fetch";
import type { AppControllerGetHelloError, AppControllerGetHelloResponse, CreateCompanyData, CreateCompanyError, CreateCompanyResponse, CreateCurrentCompanyPaymentDetailsData, CreateCurrentCompanyPaymentDetailsError, CreateCurrentCompanyPaymentDetailsResponse, CreateCurrentCompanyUserData, CreateCurrentCompanyUserError, CreateCurrentCompanyUserResponse, CreateUserData, CreateUserError, CreateUserResponse, DeleteCurrentCompanyUserData, DeleteCurrentCompanyUserError, DeleteCurrentCompanyUserResponse, DeleteCurrentUserError, DeleteCurrentUserResponse, GetBoldFontError, GetBoldFontResponse, GetCurrentCompanyError, GetCurrentCompanyPaymentDetailsError, GetCurrentCompanyPaymentDetailsResponse, GetCurrentCompanyResponse, GetCurrentCompanyUsersError, GetCurrentCompanyUsersResponse, GetCurrentUserError, GetCurrentUserProfileError, GetCurrentUserProfileResponse, GetCurrentUserResponse, GetRegularFontError, GetRegularFontResponse, GetZipCodeData, GetZipCodeError, GetZipCodeResponse, UpdateCurrentCompanyData, UpdateCurrentCompanyError, UpdateCurrentCompanyPaymentDetailsData, UpdateCurrentCompanyPaymentDetailsError, UpdateCurrentCompanyPaymentDetailsResponse, UpdateCurrentCompanyResponse, UpdateCurrentUserData, UpdateCurrentUserError, UpdateCurrentUserResponse } from "./types.gen";

export function appControllerGetHello(options?: Options) {
	return (options?.client ?? client).get<AppControllerGetHelloResponse, AppControllerGetHelloError>({
		...options,
		url: "/",
	});
}

export function getZipCode(options: Options<GetZipCodeData>) {
	return (options?.client ?? client).get<GetZipCodeResponse, GetZipCodeError>({
		...options,
		url: "/zip-code",
	});
}

export function getBoldFont(options?: Options) {
	return (options?.client ?? client).get<GetBoldFontResponse, GetBoldFontError>({
		...options,
		url: "/fonts/bold",
	});
}

export function getRegularFont(options?: Options) {
	return (options?.client ?? client).get<GetRegularFontResponse, GetRegularFontError>({
		...options,
		url: "/fonts/regular",
	});
}

export function createUser(options: Options<CreateUserData>) {
	return (options?.client ?? client).post<CreateUserResponse, CreateUserError>({
		...options,
		url: "/users",
	});
}

export function deleteCurrentUser(options?: Options) {
	return (options?.client ?? client).delete<DeleteCurrentUserResponse, DeleteCurrentUserError>({
		...options,
		url: "/users/me",
	});
}

export function updateCurrentUser(options: Options<UpdateCurrentUserData>) {
	return (options?.client ?? client).put<UpdateCurrentUserResponse, UpdateCurrentUserError>({
		...options,
		url: "/users/me",
	});
}

export function getCurrentUser(options?: Options) {
	return (options?.client ?? client).get<GetCurrentUserResponse, GetCurrentUserError>({
		...options,
		url: "/users/me",
	});
}

export function getCurrentUserProfile(options?: Options) {
	return (options?.client ?? client).get<GetCurrentUserProfileResponse, GetCurrentUserProfileError>({
		...options,
		url: "/users/me/profile",
	});
}

export function createCompany(options: Options<CreateCompanyData>) {
	return (options?.client ?? client).post<CreateCompanyResponse, CreateCompanyError>({
		...options,
		url: "/companies",
	});
}

export function getCurrentCompany(options?: Options) {
	return (options?.client ?? client).get<GetCurrentCompanyResponse, GetCurrentCompanyError>({
		...options,
		url: "/companies/my",
	});
}

export function updateCurrentCompany(options: Options<UpdateCurrentCompanyData>) {
	return (options?.client ?? client).put<UpdateCurrentCompanyResponse, UpdateCurrentCompanyError>({
		...options,
		url: "/companies/my",
	});
}

export function getCurrentCompanyUsers(options?: Options) {
	return (options?.client ?? client).get<GetCurrentCompanyUsersResponse, GetCurrentCompanyUsersError>({
		...options,
		url: "/companies/my/users",
	});
}

export function createCurrentCompanyUser(options: Options<CreateCurrentCompanyUserData>) {
	return (options?.client ?? client).post<CreateCurrentCompanyUserResponse, CreateCurrentCompanyUserError>({
		...options,
		url: "/companies/my/users",
	});
}

export function deleteCurrentCompanyUser(options: Options<DeleteCurrentCompanyUserData>) {
	return (options?.client ?? client).delete<DeleteCurrentCompanyUserResponse, DeleteCurrentCompanyUserError>({
		...options,
		url: "/companies/my/users/{userId}",
	});
}

export function getCurrentCompanyPaymentDetails(options?: Options) {
	return (options?.client ?? client).get<GetCurrentCompanyPaymentDetailsResponse, GetCurrentCompanyPaymentDetailsError>({
		...options,
		url: "/companies/my/payment-details",
	});
}

export function createCurrentCompanyPaymentDetails(options: Options<CreateCurrentCompanyPaymentDetailsData>) {
	return (options?.client ?? client).post<CreateCurrentCompanyPaymentDetailsResponse, CreateCurrentCompanyPaymentDetailsError>({
		...options,
		url: "/companies/my/payment-details",
	});
}

export function updateCurrentCompanyPaymentDetails(options: Options<UpdateCurrentCompanyPaymentDetailsData>) {
	return (options?.client ?? client).put<UpdateCurrentCompanyPaymentDetailsResponse, UpdateCurrentCompanyPaymentDetailsError>({
		...options,
		url: "/companies/my/payment-details",
	});
}
